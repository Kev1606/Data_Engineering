################################################################################################################
##Crear la imagen que está en el folder docker de dbt
docker build --tag dbt --no-cache --target dbt-sqlserver --build-arg dbt_sqlserver_ref .


##correr el server apuntando a la carpeta donde se va iniciar el python environment de trabajo para dbt
## con esto el image está listo para crear en env de python dentro de /usr/app, donde va a crear un folder dbt que es el ambiente donde creo mis proyectos
## el image está listo para correr con root, dbt por default maneja el archivo de configuración en el home del user en un folder hiden .dbt
docker run -t -d -p 8090:8080 --network=disponet --name dbtserver --mount type=bind,source="C:\Users\Usuario\Documents\V SEMESTRE\BASES DE DATOS II\CASOS\CASO_05\Data_Engineering\dbt\dbtworkspace",target=/usr/app --mount type=bind,source="C:\Users\Usuario\Documents\V SEMESTRE\BASES DE DATOS II\CASOS\CASO_05\Data_Engineering\dbt\dbtworkspace",target=/root/.dbt/ dbt


## ingreso al batch para inicializar mi proyecto
docker exec -it dbtserver /bin/bash

## chequear que la paquetería sea la versión que queremos usar
dbt --version

## creamos el patcher, podemos crear K patchers, esto es el programa donde se configura
## entradas, salidas, transformaciones y cargas
## creando el proyecto con el nombre "transpacces"
dbt init transpacces

## el archivo de profiles ya va estar mapeando al /root/.dbt/profiles.yml 
## configurar el file debidamente y testearlo , para ello ubicarse en el folder donde
## se encuentra su dbt_project.yml y ejecutar
## asumiendo que el profile section se llama default

dbt debug --profile transpacces

# cree los sources en el yml y el modelo en el sql

dbt compile
dbt run
dbt test

#dbt packages

include the package in the packages.yml file

dbt deps